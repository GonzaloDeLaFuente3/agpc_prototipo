{
  "c1be3bd0-03e7-42f4-b981-209ef4bb3a2d": {
    "titulo": "Ramas git",
    "fecha": "2025-10-11T13:37:34",
    "participantes": [],
    "metadata": {},
    "total_fragmentos": 2,
    "fragmentos_ids": [
      "cea96754-ea0c-4d9e-8736-50f219e1d056",
      "c1be3bd0-03e7-42f4-b981-209ef4bb3a2d_pdf_0_0"
    ],
    "created_at": "2025-10-11T13:37:34",
    "attachments": [
      {
        "filename": "Manejo_de_Ramas_en_Git.pdf",
        "file_path": "storage/documents/conv_20251011133734693968\\Manejo_de_Ramas_en_Git.pdf",
        "extracted_text": "Manejo de Ramas en Git\n \nGit es un sistema de control de versiones distribuido que permite trabajar con diferentes\nversiones del código fuente simultáneamente. Uno de los conceptos más poderosos y\nútiles de Git es el manejo de ramas (branches), que facilita el desarrollo paralelo, la\nexperimentación y la colaboración.\n¿Qué es una rama?\nUna rama en Git es una línea independiente de desarrollo. Permite que los\ndesarrolladores trabajen en nuevas características, correcciones o experimentos sin\nafectar la rama principal (generalmente llamada main o master).\nComandos básicos para manejar ramas\n\n**Crear una nueva rama:** `git branch nombre_rama`\n\n**Cambiar de rama:** `git checkout nombre_rama` o `git switch nombre_rama`\n\n**Crear y cambiar a una nueva rama:** `git checkout -b nombre_rama`\n\n**Listar ramas existentes:** `git branch`\n\n**Eliminar una rama:** `git branch -d nombre_rama`\n\n**Fusionar ramas:** `git merge nombre_rama` (desde la rama donde se quiere\nintegrar los cambios)\nBuenas prácticas al trabajar con ramas\n\nUsar nombres descriptivos para las ramas, como `feature/login` o\n`bugfix/corrige-error-404`.\n\nMantener la rama principal (main/master) siempre estable y funcional.\n\nFusionar frecuentemente para evitar conflictos grandes.\n\nEliminar las ramas que ya no se utilicen para mantener el repositorio limpio.\n\nUtilizar `pull requests` o `merge requests` para revisar el código antes de fusionarlo.\nFlujo de trabajo común con ramas\n1. Crear una rama desde main para desarrollar una nueva funcionalidad. 2. Realizar\ncommits frecuentes en la nueva rama. 3. Fusionar los cambios en main cuando la\nfuncionalidad esté completa. 4. Resolver conflictos si los hubiera. 5. Eliminar la rama\nluego de la fusión.\nConclusión\nEl uso correcto de las ramas en Git mejora la organización, la colaboración y la calidad del\ndesarrollo de software. Dominar el flujo de trabajo con ramas es fundamental para\ncualquier equipo de desarrollo moderno.\n",
        "metadata": {
          "size_bytes": 2997,
          "upload_date": "2025-10-11T13:37:34.737749",
          "type": "pdf"
        }
      }
    ],
    "fragmentos_pdf_ids": [
      "c1be3bd0-03e7-42f4-b981-209ef4bb3a2d_pdf_0_0"
    ],
    "total_fragmentos_pdf": 1
  },
  "b90b220e-dfc8-4c24-9e87-adcefe2704dc": {
    "titulo": "Aplicando el Ciclo de Vida del Software en un Proyecto Real",
    "fecha": "2025-10-11T18:16:34",
    "participantes": [
      "Lucia",
      "Diego",
      "Camila",
      "Julián",
      "Sofia"
    ],
    "metadata": {},
    "total_fragmentos": 7,
    "fragmentos_ids": [
      "35447a6b-c051-4477-b22e-7d3838fa00b9",
      "83ab7f85-3012-467c-8eca-37cf1b5b8d24",
      "24a6fcf4-ef7a-4434-b3f9-0903083d31cd",
      "d5815b76-3289-44a9-95b4-5e74584072c0",
      "9e7d96b3-16ef-4a3f-8ff4-4fd4cccc0782",
      "fab21b39-9a3c-4970-9297-14c3920a56a4",
      "b90b220e-dfc8-4c24-9e87-adcefe2704dc_pdf_0_0"
    ],
    "created_at": "2025-10-11T18:16:34",
    "attachments": [
      {
        "filename": "Ciclo_de_Vida_del_Desarrollo_de_Software.pdf",
        "file_path": "storage/documents/conv_20251011181634528071\\Ciclo_de_Vida_del_Desarrollo_de_Software.pdf",
        "extracted_text": "Ciclo de Vida del Desarrollo de Software\nEl ciclo de vida del desarrollo de software (SDLC, por sus siglas en inglés) es un marco\nestructurado que define las fases involucradas en la creación, implementación y\nmantenimiento de un sistema de software. Su propósito es garantizar que el producto final\ncumpla con los requisitos del cliente, dentro de los plazos y costos establecidos.\nFases del Ciclo de Vida del Software\n\n**1. Análisis de Requisitos:** Se identifican las necesidades del cliente, se\ndocumentan los requerimientos funcionales y no funcionales, y se definen los\nobjetivos del sistema.\n\n**2. Diseño del Sistema:** Se elabora la arquitectura general del sistema, definiendo\nlos componentes, la interfaz, la base de datos y las tecnologías a utilizar.\n\n**3. Implementación o Desarrollo:** Los programadores escriben el código fuente de\nacuerdo con las especificaciones del diseño, aplicando buenas prácticas de\nprogramación.\n\n**4. Pruebas (Testing):** Se verifican y validan las funcionalidades del software,\ndetectando errores y asegurando que el sistema cumpla con los requisitos\nestablecidos.\n\n**5. Despliegue:** El sistema se pone en funcionamiento en el entorno de producción,\ndisponible para los usuarios finales.\n\n**6. Mantenimiento:** Se corrigen errores, se realizan actualizaciones y mejoras para\nasegurar el correcto funcionamiento del software a largo plazo.\nModelos del Ciclo de Vida del Software\n\n**Modelo en Cascada:** Las fases se ejecutan secuencialmente. Es sencillo pero\nrígido ante cambios.\n\n**Modelo Incremental:** El desarrollo se realiza en módulos o incrementos, añadiendo\nfuncionalidades progresivamente.\n\n**Modelo en Espiral:** Combina desarrollo iterativo con gestión de riesgos. Ideal para\nproyectos grandes y complejos.\n\n**Modelo Ágil:** Promueve entregas rápidas, comunicación constante y adaptación\ncontinua al cambio (Scrum, Kanban).\nImportancia del Ciclo de Vida del Software\nAplicar un ciclo de vida bien definido permite mejorar la calidad del software, reducir\ncostos, cumplir con los plazos de entrega y aumentar la satisfacción del cliente. Además,\nfacilita la comunicación entre equipos y promueve la mejora continua en los procesos de\ndesarrollo.\nConclusión\n\n\nEl ciclo de vida del desarrollo de software proporciona una guía estructurada para\nplanificar, diseñar, construir y mantener sistemas eficientes. Elegir el modelo adecuado\nsegún las necesidades del proyecto es clave para garantizar su éxito.\n",
        "metadata": {
          "size_bytes": 3780,
          "upload_date": "2025-10-11T18:16:34.557231",
          "type": "pdf"
        }
      }
    ],
    "fragmentos_pdf_ids": [
      "b90b220e-dfc8-4c24-9e87-adcefe2704dc_pdf_0_0"
    ],
    "total_fragmentos_pdf": 1
  }
}